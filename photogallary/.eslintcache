[{"C:\\Users\\0\\source\\repos\\photogallary\\src\\index.js":"1","C:\\Users\\0\\source\\repos\\photogallary\\src\\reportWebVitals.js":"2","C:\\Users\\0\\source\\repos\\photogallary\\src\\App.js":"3","C:\\Users\\0\\source\\repos\\photogallary\\src\\components\\PhotoGallaryUserList.js":"4","C:\\Users\\0\\source\\repos\\photogallary\\src\\components\\PhotoGallaryUser.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":249,"mtime":1611328704352,"results":"9","hashOfConfig":"7"},{"size":3388,"mtime":1611346424296,"results":"10","hashOfConfig":"7"},{"size":2884,"mtime":1611347605744,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"zvnf1v",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\0\\source\\repos\\photogallary\\src\\index.js",[],["25","26"],"C:\\Users\\0\\source\\repos\\photogallary\\src\\reportWebVitals.js",[],"C:\\Users\\0\\source\\repos\\photogallary\\src\\App.js",[],"C:\\Users\\0\\source\\repos\\photogallary\\src\\components\\PhotoGallaryUserList.js",["27","28","29"],"import React, { useState, useEffect } from 'react'\r\nimport PhotoGallaryUser from './PhotoGallaryUser';\r\nimport axios from \"axios\";\r\n\r\nexport default function PhotoGallaryUserList(){\r\n    const [userList, setUserList] = useState([])\r\n    const [recordForEdit, setRecordForEdit] = useState(null)\r\n\r\n    useEffect(() => {\r\n        refreshUserList();\r\n    }, [])\r\n\r\n    const PhotoGallaryAPI = (url = 'https://localhost:44324/api/PhotoGallaryUsers/') => {\r\n        return {\r\n            fetchAll: () => axios.get(url),\r\n            create: newRecord => axios.post(url, newRecord),\r\n            update: (id, updatedRecord) => axios.put(url + id, updatedRecord),\r\n            delete: id => axios.delete(url + id)\r\n        }\r\n    }\r\n\r\n    function refreshUserList() {\r\n        PhotoGallaryAPI().fetchAll()\r\n            .then(res => {\r\n                setUserList(res.data)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    const addOrEdit = (formData, onSuccess) => {\r\n        if (formData.get('userID') == \"0\")\r\n            PhotoGallaryAPI().create(formData)\r\n                .then(res => {\r\n                    onSuccess();\r\n                    refreshUserList();\r\n                })\r\n                .catch(err => console.log(err))\r\n        else\r\n            PhotoGallaryAPI().update(formData.get('userID'), formData)\r\n                .then(res => {\r\n                    onSuccess();\r\n                    refreshUserList();\r\n                })\r\n                .catch(err => console.log(err))\r\n\r\n    }\r\n\r\n\r\n    const showRecordDetails = data => {\r\n        setRecordForEdit(data)\r\n    }\r\n\r\n    const onDelete = (e, id) => {\r\n        e.stopPropagation();\r\n        if (window.confirm('Are you sure to delete this record?'))\r\n            PhotoGallaryAPI().delete(id)\r\n                .then(res => refreshUserList())\r\n                .catch(err => console.log(err))\r\n    }\r\n\r\n    const imageCard = data => (\r\n        <div className=\"card\" onClick={() => { showRecordDetails(data) }}>\r\n            <img src={data.imageSrc} className=\"card-img-top rounded-circle\" />\r\n            <div className=\"card-body\">\r\n                <h5>{data.imageDescription}</h5>\r\n                <button className=\"btn btn-light delete-button\" onClick={e => onDelete(e, parseInt(data.userID))}>\r\n                    <i className=\"far fa-trash-alt\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n return(\r\n  <div className=\"row\">\r\n   <div className=\"col-md-12\">\r\n    <div className=\"jumbotron jumbotron-fluid py-4\">\r\n     <div className=\"container text-center\">\r\n      <h1 className=\"display-4\">Photo Gallary</h1>\r\n     </div>\r\n    </div>\r\n   </div>\r\n\r\n   <div className=\"col-md-4\">\r\n    <PhotoGallaryUser addOrEdit={addOrEdit} recordForEdit={recordForEdit}/>\r\n   </div>\r\n\r\n\r\n   <div className=\"col-md-8\">\r\n    <table>\r\n        <tbody>\r\n            {\r\n                //tr > 3 td\r\n                [...Array(Math.ceil(userList.length / 3))].map((e, i) =>\r\n                    <tr key={i}>\r\n                        <td>{imageCard(userList[3 * i])}</td>\r\n                        <td>{userList[3 * i + 1] ? imageCard(userList[3 * i + 1]) : null}</td>\r\n                        <td>{userList[3 * i + 2] ? imageCard(userList[3 * i + 2]) : null}</td>\r\n                    </tr>\r\n                )\r\n            }\r\n        </tbody>\r\n    </table>\r\n   </div>\r\n\r\n  </div>\r\n )\r\n}","C:\\Users\\0\\source\\repos\\photogallary\\src\\components\\PhotoGallaryUser.js",["30","31","32","33","34"],"import React,{useState,useEffect} from 'react'\r\n\r\nconst defaultIconSrc = '/img/default-user-icon.jpg';\r\n\r\nconst initialFieldValues = {\r\n userID:0,\r\n imageDescription:'',\r\n imageName:'',\r\n imageSrc:defaultIconSrc,\r\n imageFile:null\r\n}\r\n\r\nexport default function PhotoGallaryUser(props){\r\n const { addOrEdit, recordForEdit } = props;\r\n const [values,setValues] = useState(initialFieldValues);\r\n const [errors,setErrors] = useState({});\r\n\r\nuseEffect(() => {\r\n if (recordForEdit != null)\r\n   setValues(recordForEdit);\r\n  }, [recordForEdit])\r\n\r\n const handleInputChange = e=> {\r\n  const {name,value} = e.target;\r\n  setValues({\r\n   ...values,\r\n   [name]:value\r\n  })\r\n }\r\n\r\n const previewImage = e => {\r\n  if(e.target.files && e.target.files[0]){\r\n   let imageFile = e.target.files[0];\r\n   const reader = new FileReader();\r\n   reader.onload = x=> {\r\n    setValues({\r\n     ...values,\r\n     imageFile,\r\n     imageSrc: x.target.result\r\n    })\r\n   }\r\n   reader.readAsDataURL(imageFile);\r\n  }\r\n  else{\r\n   setValues({\r\n     ...values,\r\n     imageFile:null,\r\n     imageSrc: defaultIconSrc\r\n    })\r\n  }\r\n }\r\n\r\nconst validate = () => {\r\n let temp = {}\r\n temp.imageDescription = values.imageDescription ==\"\"?false:true;\r\n temp.imageSrc = values.imageSrc == defaultIconSrc?false:true;\r\n setErrors(temp)\r\n return Object.values(temp).every(x=> x== true)\r\n}\r\n\r\nconst resetForm = () =>{\r\n setValues(initialFieldValues);\r\n document.getElementById(\"image-uploader\").value = null;\r\n setErrors({})\r\n}\r\n\r\n const handleFormSubmit = e =>{\r\n  e.preventDefault();\r\n  if(validate()){\r\n   const formData = new FormData();\r\n   formData.append('userID',values.userID);\r\n   formData.append('imageDescription',values.imageDescription);\r\n   formData.append('imageName',values.imageName);\r\n   formData.append('imageFile',values.imageFile);\r\n   addOrEdit(formData,resetForm);\r\n  }\r\n\r\n }\r\n\r\n const applyErrorClass = field => ((field in errors && errors[field]==false)?' invalid-field':'')\r\n\r\n return(\r\n  <>\r\n   <div className=\"container text-center\">\r\n    <p className=\"lead\">Post A Photo</p>\r\n   </div>\r\n   <form autoComplete=\"off\" noValidate onSubmit={handleFormSubmit}>\r\n    <div className=\"card\">\r\n     <img src={values.imageSrc} className=\"card-img-top\"/>\r\n     <div className=\"card-body\">\r\n      <div className=\"form-group\">\r\n       <input type=\"file\" accept=\"image/*\" className={\"form-control-file\"+applyErrorClass('imageSrc')} onChange={previewImage} id=\"image-uploader\"/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <input className={\"form-control-file\"+applyErrorClass('imageDescription')} placeholder=\"Description\" name=\"imageDescription\" value={values.imageDescription} onChange={handleInputChange}/>\r\n      </div>\r\n      <div className=\"form-group text-center\">\r\n       <button type=\"submit\" className=\"btn btn-light\">Submit</button>\r\n      </div>\r\n     </div>\r\n    </div>\r\n   </form>\r\n  </>\r\n )\r\n}",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":11,"column":8,"nodeType":"41","endLine":11,"endColumn":10,"suggestions":"42"},{"ruleId":"43","severity":1,"message":"44","line":31,"column":36,"nodeType":"45","messageId":"46","endLine":31,"endColumn":38},{"ruleId":"47","severity":1,"message":"48","line":63,"column":13,"nodeType":"49","endLine":63,"endColumn":80},{"ruleId":"43","severity":1,"message":"44","line":55,"column":50,"nodeType":"45","messageId":"46","endLine":55,"endColumn":52},{"ruleId":"43","severity":1,"message":"44","line":56,"column":34,"nodeType":"45","messageId":"46","endLine":56,"endColumn":36},{"ruleId":"43","severity":1,"message":"44","line":58,"column":40,"nodeType":"45","messageId":"46","endLine":58,"endColumn":42},{"ruleId":"43","severity":1,"message":"44","line":80,"column":69,"nodeType":"45","messageId":"46","endLine":80,"endColumn":71},{"ruleId":"47","severity":1,"message":"48","line":89,"column":6,"nodeType":"49","endLine":89,"endColumn":59},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshUserList'. Either include it or remove the dependency array.","ArrayExpression",["52"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"53","fix":"54"},"Update the dependencies array to be: [refreshUserList]",{"range":"55","text":"56"},[355,357],"[refreshUserList]"]